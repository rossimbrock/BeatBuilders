import axios from 'axios';

const pullSongInfo = async (songTitle: string, songArtist: string): Promise<{coverUrl: string | undefined, previewUrl: string | undefined} | undefined> => {
    
    // Change this to the automated access token Tom made later
    const url = "https://accounts.spotify.com/api/token";
    const data = "grant_type=client_credentials&client_id=0392115c84454df6b0aa1115841830af&client_secret=05b53f6b81c440a795483a8253b52ea0";
    const headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    };
    let accessToken = '';
    axios.post(url, data, { headers })
    .then(response => {
        accessToken = response.data.access_token;
    })
    .catch(error => {
        console.error('Error:', error);
    });



    const title = songTitle.replace(/ /g, "%20");
    const artist = songArtist.replace(/ /g, "%20");

    try {
        /* Working code for pulling album art, but commented out until new spotify api access tokens can be generated by our code */
        const response = await axios.get(`https://api.spotify.com/v1/search?q=track:${title}%20artist:${artist}&type=track`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        const responses = response.data.tracks.items[0];
        const albumImages = responses?.album.images;
        const image640x640 = albumImages?.find((image: { height: number; width: number; }) => image.height === 640 && image.width === 640);
        const trackWithPreview = response.data.tracks.items.find((item: any) => item.preview_url !== null);
        let previewUrl = trackWithPreview?.preview_url;
        //Use Deezer API if Spotify doesn't work
        if (!previewUrl) {
            // Use a proxy to connect to Deezer to avoid CORS error
            // FIX LATER - PROXY NEEDS REPLACED, CLICK LINK BELOW AND CLICK THE BUTTON ON THE PAGE IF IT DOESN'T WORK
            const proxyUrl = 'https://cors-anywhere.herokuapp.com/';
            const deezerUrl = `https://api.deezer.com/search?q=${encodeURIComponent(title)} ${encodeURIComponent(artist)}`;
            const response = await axios.get(deezerUrl, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (response.data && response.data.data.length > 0) {
                const deezerTrack = response.data.data[0];
                previewUrl = deezerTrack.preview;
            }
        }

        return {
            coverUrl: image640x640?.url,
            previewUrl: previewUrl
        };
        // return "https://i.scdn.co/image/ab67616d0000b2737acee948ecac8380c1b6ce30"

    } catch (error) {
        console.error('Error fetching song info:', error);
        return undefined;
    }
}

export default pullSongInfo;
